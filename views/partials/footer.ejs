<footer class = "footer">
	<div class = "container-fluid">
		<div class = "row">
			<div class="text-center p-3" style="background-color: rgba(0, 0, 0, 0.2);">
				© 2020 Copyright: PetAdote
			  </div>
		</div>
	</div>
</footer>



<script>
	// Elementos envolvidos no cadastro.
	let formCadFields = document.querySelector('div#cadFields');

	let elementsCad01 = `<p class="on.top" style="margin-top: 20px; font-size: 35px;"> Cadastro 1/3 :</p>
									<label class="Label" for="nome"> Nome:</label>
									<br>
									<input class="Input" type="text" id="nome" name="primeiro_nome" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="sobrenome"> Sobrenome: </label>
									<br>
									<input class="Input" type="text" id="sobrenome" name="sobrenome" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="cpf"> CPF: </label>
									<br>
									<input class="Input" type="text" id="cpf" name="cpf" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="telefone"> Telefone: </label>
									<br>
									<input class="Input" type="text" id="telefone" name="telefone" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="Usuario_Email"> Email:</label>
									<br>
									<input class="Input" type="text" id="Usuario_Email" name="email" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="Usuario_Email_conf" style=> Email Recuperação: </label>
									<br>
									<input class="Input" type="text" id="Usuario_Email_conf" name="email_recuperacao" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="senha" style=> Senha: </label>
									<br>
									<input class="Input" type="password" id="senha" name="senha" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="senha_conf" > Confirmar Senha: </label>
									<br>
									<input class="Input" type="password" id="senha_conf" name="confirma_senha" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="data_nas"> Data de nascimento: </label>
									<br>
									<input class="Input" type="date" id="data_nas" name="data_nascimento" placeholder="Digite aqui...">
									<br>`;

	let elementsCad02 = `<p style="margin-top: 20px; font-size: 35px;"> Cadastro 2/3:</p>
									<label class="Label" for="foto"  style="margin-top:20px"> Foto (opcional):</label>
									<br>
									<input class="Input" name="foto_usuario" type="file" style="margin-top:20px"> 
									<br>
									<label class="Label" for="capa"  style="margin-top:20px"> Capa (opcional):</label>
									<br>
									<input class="Input" name="banner_usuario" type="file" style="margin-top:20px"> 
									<br>
									<label class="Label" for="descrição"  style="margin-top:20px"> Descrição: </label>
									<br>
									<input class="Input" name="descricao" type="text" style="margin-top:20px" placeholder="Digite Aqui..."> 
									<br>
									`

	let elementsCad03 = `<p style="margin-top: 20px; font-size: 35px;"> Cadastro 3/3 :</p>
									<label class="Label" for="estado"> Estado:</label>
									<br>
									<input class="Input" type="text" id="estado" name="estado" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="cidade"> Cidade: </label>
									<br>
									<input class="Input" type="text" id="cidade" name="cidade" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="bairro"> Bairro:</label>
									<br>
									<input class="Input" type="text" id="bairro" name="bairro" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="lougradouro" style=> Louradouro: </label>
									<br>
									<input class="Input" type="text" id="lougradouro" name="logradouro" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="numero" style=> Número: </label>
									<br>
									<input class="Input" type="number" id="numero" name="numero" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="complemento" > Complemento (opcional): </label>
									<br>
									<input class="Input" type="text" id="complemento" name="complemento" placeholder="Digite aqui...">
									<br>
									<label class="Label" for="cep"> CEP: </label>
									<br>
									<input class="Input" type="text" id="cep" name="cep" placeholder="Digite aqui...">
									<br>
									`

    let userData = new FormData();
	let userAvatar = new FormData();
	let userBanner = new FormData();
	
	// let btnProximo = undefined;

	window.addEventListener('DOMContentLoaded', () => {
		formCadFields.innerHTML = elementsCad01;

		let btnProximo = document.querySelector('input#btnProximo');
	});

	let etapas = 1;

	btnProximo.addEventListener('click', async () => {
		formCadFields.querySelectorAll('[name]').forEach((element) => {
				// console.log(`${element.name}: ${element.value}`);
			if (element && element.value || element.files){
				if (element.type === 'file'){
					// console.log(element);
					// console.log(element.files[0]);
					if (element.files[0] !== undefined){	// Adiciona os arquivos (imagens) do usuário à multiparts diferentes.
						if (element.name === 'foto_usuario'){
							userAvatar.append(element.name, element.files[0]);
						} else if (element.name === 'banner_usuario'){
							userBanner.append(element.name, element.files[0]);
						}
					}
				} else {
					userData.append(element.name, String(element.value).trim())
				}
			}

		});

		console.log(etapas);

		switch(etapas){
			case 1: 
				formCadFields.innerHTML = elementsCad02;
				etapas ++;
				break;
			case 2: 
				formCadFields.innerHTML = elementsCad03;
				btnProximo.value = 'Concluir';
				etapas ++;
				break; 
			case 3: 

				// Log dos valores capturados.

					// console.log('UserData');
					// 	for (let pair of userData.entries()){
					// 		console.log(pair[0], pair[1]);
					// 	}
					// console.log('UserFiles');
					// 	for (let pair of userFiles.entries()){
					// 		console.log(pair[0], pair[1]);
					// 	}

					// console.log('Userfiles?');
					// console.log(userFiles.entries().next().value === undefined);
					// ↑ Verifica se existem arquivos no userFiles dataForm (multipart/form-data).

				// Transformando os dados dos campos em "application/x-www-form-urlencoded".

				let userFormData = new URLSearchParams(userData);
				// console.log('formData', userFormData);

				// Requisição assíncrona de cadastro dos dados do usuário.
				let restAddress = 'http://rest-petadote.ddns.net:3000/'

				let accessTokenAPI = undefined;
				
				await fetch(restAddress + 'autenticacao_api/?cliente=1&senha=123', {
					method: 'GET'
				})
				.then((response) => { 
					// console.log('RespToken: ', response);
					// 'response' Contém o Status do Request e funções que retornam promises para lidar com os dados da resposta.
					return response.json();
				})
				.then((result) => {
					console.log('ResultToken: ', result);
					// Uma mensagem (de sucesso ou descrevendo o motivo da falha) e o Token de Acesso temporário do Cliente.
					return accessTokenAPI = result.token;
				})
				.catch((error) => {
					return console.log('Não foi possível receber o Token de Acesso da API. ', error);
				})

				// console.log(accessTokenAPI);
				// Veja o token de acesso recebido.

				let accessTokenUser = undefined;

				if (accessTokenAPI){
					await fetch(restAddress + 'contas', {
						method: 'POST',
						headers: new Headers({
							'Authorization': `Bearer ${accessTokenAPI}`
						}),
						body: userFormData
					})
					.then((response) => {
						// console.log('RespCadastro: ', response);
						// 'response' Contém o Status do Request e funções que retornam promises para lidar com os dados da resposta.
						return response.json();
					})
					.then((result) => {
						console.log('ResultCadastro: ', result);
						// 'result' é uma Mensagem (De sucesso ou descrevendo o motivo da falha) e o Token de Acesso do Usuário nesse Cliente.
						return accessTokenUser = result.tokenUsuario;
					})
				}

				if (accessTokenUser){

					if (userAvatar.entries().next().value !== undefined){
						await fetch(restAddress + 'usuarios/6', {			// Atenção, o ID do usuário deve ser decodificado do JWT.
							method: 'PATCH',
							headers: new Headers({
								'Authorization': `Bearer ${accessTokenUser}`
							}),
							body: userAvatar
						})
						.then((response) => {
							return response.json();
						})
						.then((result) => {
							console.log('ResultAdiçãoDoAvatar', result);
						})
					}

					if (userBanner.entries().next().value !== undefined){
						await fetch(restAddress + 'usuarios/6', {			// Atenção, o ID do usuário deve ser decodificado do JWT.
							method: 'PATCH',
							headers: new Headers({
								'Authorization': `Bearer ${accessTokenUser}`
							}),
							body: userBanner
						})
						.then((response) => {
							return response.json();
						})
						.then((result) => {
							console.log('ResultAdiçãoDoAvatar', result);
						})
					}

				}

				alert('Cadastro do usuário está completo e a imagem foi modificada!');

				break;
			default:
				break;
		}

	})

</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js" integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0" crossorigin="anonymous"></script>